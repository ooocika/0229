kotlin}{
  targets.all{
    compilations.all{
      compilerOptions.configure{
        allWarningsAsErrors.set(true)
      }
    }
  }
}
//
kotlin{
  jvm().compilations.all{
    compilerOptions.configure{
      jvmTarget.set(JvmTarget.JVM_1_8)
    }
  }
}
//
kotlin{
  jvm{
    val main by compilations.getting{
      compilerOptions.configure{
        jvmTarget.set(JvmTarget.JVM_1_8)
      }
    }
  }
}
//
kotlin{
  jvm(){
    compilations{
      val main by getting

      val integrationTest by compilations.creating{
        defaultSourceSet{
          dependencies{
            implementation(main.compileDependencyFiles + main.output.classesDirs)
            implementation(kotlin("test-junit"))
          }
        }
        tasks.register<Test>("integrationTest")

        classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs

        testClassesDirs = putput.classesDirs
      }
    }
  }
}
//
kotlin{
  jvm{
    withJava()
  }
}
//
kotlin{
  linuxX64{
    compilations.getByName("main"){
      val myInterop by cinterops.creating{

        defFile(project.file("def-file.def"))


      packageName("org.sample")

      CompilerOpts("-Ipath/to/headers")

      includeDirs.apply{
        allHeaders("path1", "path2")


        headerFilterOnly("path1", "path2")
      }
      includeDirs("include/directory", "another/directory")
      }
      val anotherInterop by cinterops.creating
    }
  }
  
}
//
kotlin{
  android{}
}
dependencies{
  kapt("com.my.annotation:processer:1.0.0")
}
//
kotlinArtifacts{
  Native.Library{
    target = iosX64
    modes(DEBUG, RELEASE)
  }
}
//
kotlinArtifacts{
  Native.Library("mylib"){
    
  }
}
//
kotlinArtifacts{
  Native.Library("myslib"){
    target = linuxX64
    isStatic = false
    modes(DEBUG)
    addModule(project(":lib"))
    kotlinOptions{
      verbose = false
      freeCompilerArgs += "-Xmen=pool"
    }
  }
}
//
kotlinArtifacts{
  Native.Framework("myframe"){
    modes(DEBUG, RELEASE)
    target =  iosArm64
    isStatic = false
    embedBitcode = EmbedBitcodeMode.MARKER
    kotlinOptions{
      verbose = false
    }
  }

}
//
kotlinArtifacts{
  Native.Framework("myfatframe"){
   
    target =  (iosX32, iosX64)
    embedBitcode = EmbedBitcodeMode.DISABLE
    kotlinOptions{
      suppressWarning = false
    }
  }
}
//
kotlinArtifacts{
  Native.XCFramework("sdk"){
    target =  (iosX32, iosArm64, iosSimulatorArm64)
  setModules(
          project(":shared")

          project(":lib")
  )
  }
}
//
kotlin{
  linuxX64{
    binaries{
      
    
    executable{
    }  
    }
  }
}
//
binaries{
    executable(listOf(DEBUG)){
      
    }
}
//
binaries{
  executable("foo", listOf(DEBUG))
}
executable("bar"){
}


}
//
binaries["fooDebugExecutable"]
binaries.getByName("fooDebugExecutable")

binaries.findByName("fooDebugExecutable")
//
binaries.getExecutable("foo", DEBUG)
binaries.getExecutable(DEBUG)
binaries.getExecutable("bar", "DEBUG")

binaries.getExecutable("foo", DEBUG)
//
kotlin{
  sourceSets{
    macosMain.dependencies{

      api(project(":dependency"))
      api("org.example:exported-library:1.0")

      api("org.example:not-exported-library:1.0")
    }
  }
  macosX64("macos").binaries{
    framework{
      export(project(":dependency"))
      export("org.example:exported-library:1.0")
    }
    sharedLib{
      export(project(':dependency'))
    }
  }
}
//
binaries{
  framework{
    export(project(":dependency"))
    transitiveExport = true
  }
}
//
kotlin{
  val ios32 = watchosArm32("watchos32")
  val ios64 = watchosarm("watchos64")
  configure(listOf(watchos32, watchos64)){
    binaries.framework{
      baseName = "my_framework"
    }
  }
  tasks.register<FatFrameworkTask>("debugFatFramework"){
    baseName = "my_framework"

    destinationDir = buildDir.resolve("fat-framework/debug")

    from(
      ios32.binaries.getFramework("DEBUG")
      ios64.binaries.getFramework("DEBUG")
    )
  }
}
//
plugins{
  kotlin("multiplatform")
}
kotlin{
  val xcf = XCFramework()
  val iosTargets = listOf(iosX64(), iosArm64(), iosSimulatorArm64())

  iosTargets.forEach{
    it.binarise.framework{
      baseName = "shared"
      xcf.add(this)
    }
  }
}
//
binaries{
  framework{
    binaryOption("bundleId", "com.example.app")
     binaryOption("bundleVersion", "2")
  }
}
//
plugins{
  id("maven-publish")
}
group = "com.example"
version = "1.0"

publishing{
  repositories{
    maven{
      
    }
  }
}
//
kotlin{
  jvm()
  js()
  mingwX64()
  linuxX64()
  val publicationsFromMainHost = 
  listOf(jvm(), js()).map {it.name} + "kotlinMultiplatform"
  publishing{
    publications{
      matching{it.name in publicationsFromMainHost}.all{
        val targetPublication = this@all
        tasks.withType<AbstractPublishToMaven>()
        .matching{it.publication == targetPublication}
        .configureEach{onlyIf{findProperty("isMainHost") == "true"}}
      }
    }
  }
}
//
kotlin{
  android{
    publishLibraryVariants("release","debug")
  }
}
//
kotlin{
  android{
    publishLibraryVariantsGroupedByFlavor = true
  }
}
//
kotlin{
  withSourcesJar(publish = false)

  jvm()
  linuxX64()
}
//
kotlin{
  jvm{
    withSourcesJar(publish = false)
    jvm{
      withSourcesJar(publish = true)
    }
  }
  linuxX64()
}
//

plugins{
  kotlin("multiplatform")version"1.9.20"
}
//
kotlin{
  jvm()
  iosX64()
  macosX64()
  js().browser()
}
//
kotlin{
  jvm{
    withJava()
  }
}
//
kotlin{
  js().browser{
    webpackTask{}
    testRuns{}
    dceTask{
      keep("myKotlinJsApplication.org.example.keepFromDce")
    }
    distribution{
      directory = File("$projectDir"/customdir/")
    }
  }
}
//
kotlin{
  linuxX64{
    binaries{
      executable{
        
      }
    }
  }
}
//
binaries{
  executable("my_executable", listOf(RELEASE)){

    compilation = comilations["test"]

    linkerOpts = mutableListOf("-L/lib/search/path", "-L/another/search/path",
     "-lmylib"                         )
  
  baseName = "foo"

    entryPoint = "org.example.main"

    println("Executable path: ${outputFile.absolutePath}")

    linkTask.dependsOn(additionalPreprocessingTask)

    runTask?.dependsOn(prepareForRun)
  }

  framework("my_framework" listOf(RELEASE)){
    isStatic = true
  }
}
//
kotlin{
  linuxX64{
    compilations.getByName("main"){
      val myInterop by cinterops.creating{

        defFile(project.file("def-file.def"))
      
        packageName("org.sample")

        compilerOpts("-Ipath/to/headers")

      includeDirs.allHeaders("path1", "path2")

      includeDirs("include/directory", "another/directory")
      }
      val anotherInterop by cinterops.creating{}
    }
  }
}
//
kotlin{
  android{
    publishLibraryVariants("release", "debug")
  }
}
//
kotlin{
  sourceSets{
    val commonMain by getting{}
  }
}
//
kotlin{
  sourceSets{
    val commonMain by creating{}
  }
}
//
kotlin{
  sourceSets{
    val commonMain by getting{
      kotlin.srcDir("src")
      resources.srcDir("res")

      dependencies{
        
      }
    }
  }
}
//
kotlin{
  jvm{
    val main by compilations.getting{
      output
    }
    compilations["test"].runtimeDependencyFiles
  }
}
//
kotlin{
  jvm(){
    compilations{
      val integrationTest by compilations.creating{
        defaultSourceSet{
          dependencies{
            
          }
        }
        tasks.register<Test>("integrationTest"){
          
        }
      }
    }
  }
}
//
kotlin{
  jvm{
      val main by compilations.getting{
       compilerOptions.configure{
         
          jvmTarget.set(JvmTarget.JVM_1_8)

          }
       compileKotlinTask
        output
        }
      compilations["test"].runtimeDependencyFiles
       

        }

  targets.all{
    compilations.all{
      CompilerOptions.configure{
        allWarningsAsError.set(true)
      }
    }
  }
      }
//
kotlin{
  sourceSets{
    val commonMain by getting{
      dependencies{
        api("com.example:foo-metadata:1.0")
      }
    }
    val jvmMain by getting{
      dependencies{
        implementation("com.example:foo-jvm:1.0")
      }
    }
  }
}
//
dependencies{
  "commonMainApi"("com.example:foo-common:1.0")
  "jvm6MainApi"("com.example:foo-jvm6:1.0")

}
//
kotlin{
  sourceSets.all{
    languageSettings.apply{
      languageVersion = "1.8"
      apiVersion = "1.8"
      enableLanguageFeature("InlineClasses")
      optIn("kotlin.ExperimentalUnsignedTypes")
      progressiveMode = true
    }
  }
}
//
kotlin{
  sourceSets{
    val commonTest by getting
    val androidInstrumentedTest by getting
    {
      dependsOn(commonTest)
    }
  }
}
//
kotlin{
  @OptIn(ExperimentalKotlinGradlePluginApi::class)
  sourceSets.invokeWhenCreated("androidFreeDebug"){
}
}
//
kotlin{
  targets{
    configure([findByName]('windows'),
             findByName('linux')){
      
             }
  }
}
//
jvmCompilation<Scope>

          dependencies{
            add("jvmCompilationImplementation",
               "foo.bar.baz:1.2.3")
          }
          //
kotlin{
  jvm()
  js()
  ios()

  sourceSets{
    val commonMain by getting
    val myCustomIntermediateSourceSet by creating{
      dependsOn(commonMain)
    }
    targets["jvm"].compilations["main"].source(myCustomIntermediateSourceSet)
  }
}          
//
kotlin{
  jvm()
  js()

  ios()

  sourceSets{
    val commonMain by getting
    val myCustomIntermediateSourceSet by creating{
      dependsOn(commonMain)
    }

    val jvmMain by getting{
      dependsOn(myCustomIntermediateSourceSet)
    }

    targets["jvm"].compilations["main"].defaultSourceSet.dependsOn(myCustomIntermediateSourceSet)
    
  }
}
//
pluginManagement{
  plugins{
    kotlin("js")version "1.9.0"
  }
  repositories{
    
  }
}
//

  plugins{
    kotlin("js")version "1.9.0"
  }
  
 dependencies{
   testImplementation(kotlin("test"))
   implementation("org.jetbrains.kotlinx:kotlinx-html:0.8.0")
 }
 kotlin{
   js{
     
   }
 }

}
//
sourceSets{
  val jsMain by getting{
    dependencies{
      implementation("org.jetbrains.kotlinx:kotlinx-html:0.8.0")
    }
  }
}

dependencies{
  add("jsTestImplementation", kotlin("test"))
}
//

kotlin{
  jvm("jvmKtor"){
    attributes.attribute()
  }
  jvm("jvmOkHttp"){
    attributes.attribute
  }
  sourceSets{
    val commonMain by getting
    val commonJvmMain by sourceSets.creating{
      dependsOn(commonMain){
        dependencies{
          
        }
      }
      val jvmKtorMain by getting{
        dependsOn(commonJvmMain)
        dependencies{
          
        }
      }
      val jvmOkHttpMain by getting{
        dependsOn(commonJvmMain)
        dependencies{
          
        }
      }
    }
  }
//

kotlin{
  jvm()

  sourceSets{
    jvmMain{
      
    }
  }
}
//
include(":okHttp-impl")
include(":ktor-impl")
//
plugins{
  kotlin("jvm")
}
dependencies{
  project(":shared")
}
kotlin{
  compilerOptions{
    
  }
}
//
kotlin{
  iosArm64()
}
//
plugins{
  kotlin("jvm")version"1.9.20"
  application
}
//
fun main(){
  println("What's your name?")
  val name = readln()
  println("Hello, $name!")
}
///
fun demo(source: List<Int>){
  val list = ArrayList<Int>()

  for(item in source){
    list.add(item)
  }

  for(i in 0.. source.size - 1){
    list[i] = source[i]
  }
}
//
fun calendarDemo(){
  val calendar = Calendar.getInstance()
  if(calendar.firstDayOfWeek == Calendar.SUNDAY){
    calendar.firstDayOfWeek = Calendar.MONDAY
  }
  if(!calendar.isLenient){
    calendar.isLenient = true
  }
}
//
public class Person{
  private String name;
  private int age;

  public Person(String name, int age){
    this.name = name;
     this.age = age;
    
  }

  public String getName(){
    return name;
  }
  public int getAge(){
    return age;
  }
}
//
val persons = listOf(Person("Jack", 11), Person("Sofie", 12), Person("Peter", 11))
Persons

  .sortedBy(Person:age)

  .forEach{person -> println(person.name)}
}
//
task
                       .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()
                       .configureEach{
                         compilerOptions
                         .languageVersion
                         .set(
                           org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_1
                         )
                       }
                       //
                       foo.'is'(bar)
                       //
                       val list =ArrayList<String>()
                       list.add("Item")
                       val size = list.size
                       val item = list[0]
                       //
                       item.substring(1)
                       //
                       val nullable: String? = item
                       val notNull: String = item
                       //
                       @NotNull
                       Set<@NotNull String>toSet(@NotNull Collection<@NotNull String>elements){}
                       //
                       fun toSet(elements: (Mutable)Collection<String>) : (Mutable)Set<String>{}

   fun toSet(elements: (Mutable)Collection<String!>) : (Mutable)Set<String>{}

   public clas Base<T>{}

   public class Derived extends Base<@Nullable String> {}

   fun takeBaseOfNotNullStrings(x: Base<String>){}

   fun main(){
     takeBaseOfNotNullStrings(Derived())
   }
   //
   public class Base<@NotNull T>{}

   class Derived<K> : Base<K>{}

   //
   public class BaseWithBound<T extends @NotNull Number> {}

   //
   class BaseWithBound<T: Number> {}
   //
   @TypeQualifierNickname
   @Nonnull(when = When.ALWAYS)
   @Retention(RetentionPolicy.RUNTIME)
   public @interface MyNonnull{
     
   }

 @TypeQualifierNickname
 @CheckForNull
 @Retention(RetentionPolicy.RUNTIME)
 public @interface MyNullable{
   
 }

 interface A{
   @MyNullable String foo(@MyNonnull String x);

   String bar(List<@MyNonnull String> x);
 }
 //
 @Nonnull
 @ @TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})
 public @interface NonNullApi{
   
 }
 @Nonnull(when = When.MAYBE)
 @TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER, 
 ElementType.TYPE_USE})
 public @interface NullableApi{
   
 }

 @NullableApi
 interface A{
   String foo(String x);

   @NotNullApi
   String bar(String x, @Nullable String y);

   String baz(List<String>x);

   String qux(@Nonnull(when = When.UNKNOWN) String x);
 }
 //
 @Nonnull(when = When.ALWAYS)
 @TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})
 @UnderMigration(status = MigrationStatus.WARN)
 public @interface NonNullApi{
   
 }

 @NonNullApi
 public class Test{}
 //
 if(a is List<Int>)

 if(a is List<*>)
 //
 public class JavaArrayExample{
   public void removeIndices(int[] indices){
     
   }
 }
 //
 val javaObj = JavaArrayExample()
 val array  = intArrayOf(0,1,2,3)
 javaObj.removeIndices(array)
 //
  val array  = intArrayOf(0,1,2,3)
  array[1] = array[1]*2
                       for(x in array){
                         print(x)
                       }
 //
 public class JavaArrayExample{
   public void removeIndicesVarArg(int...indices){
     
   }
 }
 //
 val javaObj = JavaArrayExample()
 val array = intArrayOf(0,1,2,3)
 javaObj.removeIndicesVarArg(*array)
 //
 fun render(list: List<*>, to: Appendable){
   for(item in list){
     to.append(item.toString())
   }
 }//
 (foo as java.lang.Object).wait()
 //
 val fooClass = foo::class.java

                       val fooClass = foo.javaClass
    //
 class Example : Cloneable{
   override fun clone(): Any{..}
 }                      
 //
 class C{
   protected fun finalize(){
     
   }
 }
 //
 if(Character.isLetter(a))
 //
 val runnable = Runnable{println("This runs in a Runnable")}

 //
 val executor = ThreadPoolExecutor()
 executor.execute{println("This runs in a thread pool")}
 //
 executor.execute(Runnable{println("This runs in a thread pool")})
 //
 var myProperty: String
                       external get
                       external set

                       //
  private String firstName;
                       public String getFirstName(){
                         return firstName;
                       }

                       public void setFirstName(String firstName){
                         this.firstName = firstName;
                       }
                       //
    class Util

                       fun getTime()

                       //
                       new org.example.Util();
                       org.example.AppKt.getTime();

                       //
                       @file:JvmName("DemoUtils")

                       class Util
                       fun getTime()

                       //
                       new org.example.Util();
                       org.example.DemoUtil.getTime();
                       //
                       @file:JvmName("Utils")
                       @file:JvmMultifileClass

                       fun getTime()
                       //
                       @file:JvmName("Utils")
                       //
                       @file:JvmMultifileClass

                       fun getDate()
                       //
                       org.example.Util.getTime();
                       org.example.Util.getDate();
                       //
                       class User(id: String){
                         @jvmField val ID = Void
                       }
                       //
                       class JavaClient{
                         public String getID(User.user){
                           return user.ID;
                         }
                       }
                       //
  class Key(val value: Int){
    companion object{
      @JvmField
      val COMPARATOR: Comparator<Key> = compareBy<Key>{it.value}
    }
  }                     
  //
  Key.COMPARATOR.compare(key1, key2)
  ;

                       //
 object Singleton{
   lateinit var provider: Provider
 }                      

 //
 Singleton.provider = new Provider();
                       //
  object Obj{
    const val CONST = 1
    
  } 
  class C{
    companion object{
      const val VERSION = 9
    }
  }
  const val MAX = 239
                       //
          int constant = Obj.CONST;
                       int max = ExampleKt.MAX;
                       int version = C.VERSION
                       ;
                       //
  class C{
    companion object{
      @JvmStatic fun callStatic(){}
      fun callNonStatic(){}
    }
  }                     
  //
  C.callStatic();
                       C.callNonStatic();
                       C.Companion.callStatic();
                       C.Companion.callNonStatic();
                       //
                       object Obj{
                         @JvmStatic fun callStatic(){}
                         fun callNonStatic(){}
                       }
                       //
                       Obj.callStatic()
                       Obj.callNonStatic();
                       Obj.INSTANCE.callNonStatic();
                       Obj.INSTANCE.callStatic();
                       interface ChatBot{
                         companion object{
                           @JvmStatic fun greet(username: String){
                             println("Hello, $username")
                           }
                         }
                       }
                       //580 까지!!
